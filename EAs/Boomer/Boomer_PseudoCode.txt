// what variables, states, values that you need or need to track
NEED:
    Need to track number of Rate of Changes Done(O)
    need to track numer of MBs  Done(O)

    need to place limit orders at zones Done(O)
    need to cancel pending limit orders Done(O)

// Actual variables that you are going to need 
// ----------------- Tracking -----------------
// Set(X) = you haven't accounted for setting the varaible
// Set(O) = you have accounted for setting the variable
// Cleared(X) = you haven't accounted for clearing the value of the variable
// Cleared(O) = you have accounted for clearing the value of the variable
// Reset(X) = you haven't accounted for setting the varialbe after it was cleared
// Reset(O) = you have accounted for setting the variable after it was cleared
// --------------------------------------------
GLOBALS:
    // passed into constructor
    MBsToTrack = 200 
    MaxZonesInMB = 5
    AllowMitigatedZones = false
    // ----------------
    //Inputs
    input Padding = 70
    input PartialOneRR = 13
    input PartialOnePercent = 50
    input RiskPercent = 0.25
    // -----------------------

    // EA Constants
    MagicNumber = 10001
    MaxTradesDay = 10
    MaxSpread = 100
    int MBsNeeded = 2;
    //--------------

    CMB* MBs[] Set(O) Cleared(O) Reset(O) 
    MBTracker* MBTarcker Set(O) Cleared(O) Reset(O) // doesn't need to be reset
    CZone* mZones [] Set(O) Cleared(O) Reset(O)

    int hadMinRoc = false Set(O) Cleared(O) Reset(O)

    double setUpRangeEnd = 0.0 Set(O) Cleared(O) Reset(O)
    int setUpType = -1; Set(O) Cleared(O) Reset(O)

    bool singleMBSetUP = false; Set(O) Cleared(O) Reset(O)
    bool doubleMBSetUp Set(O) Cleaared(O) Reset(O)

    bool stopTrading = false; Set(O) Cleared(O) Reset(O)

OnInit():
    MBTracker = new MBTracker(MBsToTrack, MaxZonesInMB, AllowMitigatedZones)

    ArrayResize(MBs, MBsNeeded)
    ArrayResize(Zones, MaxZonesInMB)

OnDeinit():
    delete MBTracker

// what is going to happen on each tick 
OnTick():
    double openPrice = iCustom("Min. ROC", 0)
    if (openPrice != NULL && !stopTrading)
        if singleMBSetUP || doubleMBSetUp
            bool tripleMB = MBTracker.HasConecsutiveMBs(3, NULL)
            bool brokeRange = (setUpType == OP_BUY && Close[0] < setUpRangeEnd) || (setUpType == OP_SELL && Close[0] > setUpRangeEnd)
            // don't know if this is correct. Will trigger if I haven't continued the range 
            bool liquidatedSecondAndContinued = doubleMBSetUP && MBTracker.HasOppositeMB(0, null) && MBTracker.HasOppositeMB(1, NULL)  
            bool crossedOpenPrice = (Close[1] < openPrice && MathMax(Close[0], High[0]) > openPrice) || (Close[1] > openPrice && MathMin(Close[0], Low[0]) < openPrice)     

            if tripleMB 
                stopTrading = true;
                TradeHelper::MoveAllOrdersToBreakEvenByMagicNumber(MagicNumber)
                TradeHelper::CancelAllPendingOrdersByMagicNumber(MagicNumber)

            if brokeRange || liquidatedSecondAndContinued || crossedOpenPrice
                stopTrading = true;
                TradeHelper::CancelAllPendingOrdersByMagicNumber(MagicNumber)

        double minRateOfChage = iCustom("Min. ROC", 1)
        if (hadMinRoc != NULL)
            hadMinRoc = true
        
        if hadMinRoc && !singleMBSetUP && !dubleMBSetUp && MBTracker.HasOppositeMB(0, MBs)
            singleMBSetUP = true

            setUpType == MBs[0].Type()
            if MBs[0].Type() == OP_BUY
                setUpRangeEnd = iLow(Symbol(), Period(), MBs[0].LowIndex())
            else if MBs[0].Type() == OP_SELL
                setUpRangeEnd = iHigh(Symbol(), Period(), MBs[0].HighIndex())

            PlaceLimitOrders()
            ClearMBs()
            ClearZones()
        
        if hadMinRoc && singleMBSetUP && !doubleMBSetUP && MBTracker.HasConsecutiveMBs(2, MBs)
            dubleMBSetUp = true

            PlaceLimitOrders()   
            ClearMBs()
            ClearZones()
        
        for int i  = 0; i < MBsNeeded; i++
            if MBTracker.GetUnretrievedZonesForNthMostRecentMB(i, 1, zones)
                PlaceLimitOrders()
                ClearMBs()
                ClearZones()

    else
        hadMinRoc = false
        stopTrading = false

        setUpRangeEnd = 0.0
        setUpType = -1

        singleMBSetUP = false
        doubleMBSetUP = false

PlaceLimitOrders()
for i = 0; i < MaxZonesInMB; i++
    if CheckPointer(zones[i]) == POINTER_INVALID
        break;

    int orderType = setUpType == OP_BUY ? OP_BUYLIMIT : OP_SELLLIMIT;
    double stopLossPips = Zones[i].GetRangePips() + Spread + Padding

    double takeProfit = setUpType == OP_BUY ? Zones[i].EntryPrice() + (FirstPartialRR * stopLossPips) : zones[i].EntryPrice - (FirstPartialRR * stopLossPips)
    double stopLoss = setUpType == OP_BUY ? Zones[i].EntryPrice() - stopLossPips : Zones[i].EntryPrice + stopLossPips;
    lots = GetLots(stopLossPips)

    TradeHelper::PlaceLimitOrdersWithOnePartial(orderyType, lots, Zones[i].EntryPrice, stopLoss, takeProfit, ParitalOnePercent, MagicNumber)

ClearMBs()
    ArrayFree(Mbs)
    ArrayResize(MBs, MBsNeeded)

ClearZones()
    ArrayFree(Zones)
    ArrayResize(Zoens, MaxZonesInMB)